{"ast":null,"code":"var _jsxFileName = \"/home/kay/Documents/Projects/portfolio-app/src/pages/TrelloClone/components/columns.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport Card from './cards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Trello(_ref) {\n  _s();\n\n  let {\n    dataTrello\n  } = _ref;\n  let [cardId, setCardId] = useState(7);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex\",\n    children: [dataTrello.map(crntColumnObject => {\n      return /*#__PURE__*/_jsxDEV(Column, {\n        cardId: cardId,\n        setCardId: setCardId,\n        crntColumnObject: crntColumnObject\n      }, crntColumnObject.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 18\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-column-btn\",\n      children: \"Add column\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Trello, \"tLD0PEZdwx+9yPmXaambDKeBgjE=\");\n\n_c = Trello;\n\nfunction Column(_ref2) {\n  _s2();\n\n  let {\n    crntColumnObject,\n    cardId,\n    setCardId\n  } = _ref2;\n  let [cardsArrayObject, setCardsArray] = useState({\n    cardsArray: crntColumnObject.cards\n  });\n  const cardInput = useRef();\n\n  function addCard() {\n    setCardId(cardId + 1);\n    setCardsArray(oldCardsArrayObject => {\n      let oldCardsArray = oldCardsArrayObject.cardsArray;\n      let newName = cardInput.current.value;\n      cardInput.current.value = \"\";\n      oldCardsArray.push({\n        name: newName,\n        id: 'card' + cardId\n      });\n      return {\n        cardsArray: oldCardsArray\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block columns-bg\",\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: crntColumnObject.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropPlace\",\n        onDrop: drop,\n        onDragOver: allowDrop,\n        children: cardsArrayObject.cardsArray.map(crntCardObject => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            crntCardObject: crntCardObject\n          }, 'card' + crntCardObject.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: cardInput,\n        className: \"columns-textarea\",\n        id: 'textarea' + crntColumnObject.id,\n        placeholder: \"Enter Card Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addCard,\n        className: \"columns-btn\",\n        children: \"Add Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this); // let columns_array = []\n  // for (let i = 0; i < 5; i++){\n  //   let column = \n  // <div>\n  //   <div className=\"block\">\n  //     <div className=\"columns-bg\" onDrop={drop} onDragOver={allowDrop}>\n  //       {i + 1}\n  //       <div className=\"dropPlace\">\n  //       {ColumnOptions(i)}\n  //       </div>\n  //       <textarea className=\"columns-textarea\"></textarea>\n  //       <button className=\"columns-btn\">Button</button>\n  //     </div>\n  //   </div>\n  // </div>\n  //   columns_array.push(column)\n  // }\n  // return columns_array\n} // function modalShow(e) {\n//   e.preventDefault()\n//   let modal = document.getElementById(\"modal\")\n//   modal.classList.remove(\"hidden\")\n// }\n// function ColumnOptions(columnIndex) {\n//     let options_array = []\n//     for (let i = 0; i < 3; i++) {\n//       let id = 'card' + (columnIndex*3 + i)\n//       let option = \n//       <div className=\"flex\">\n//         <div className=\"option-bg\" id={id} onÐ¡lick={modalShow} draggable=\"true\" onDragStart={drag}>{columnIndex*3 + i + 1}</div>\n//       </div>\n//       options_array.push(option)\n//     }\n//     return options_array\n//   }\n\n\n_s2(Column, \"Xin/xfHwepiyaJdNJpyRbSwE7Pw=\");\n\n_c2 = Column;\n\nfunction ModalHide() {\n  let modal = document.getElementById(\"modal\");\n  modal.classList.add(\"hidden\");\n}\n\n_c3 = ModalHide;\n\nfunction allowDrop(ev) {\n  ev.preventDefault();\n}\n\nfunction drop(ev) {\n  ev.preventDefault();\n  var data = ev.dataTransfer.getData(\"text\");\n  ev.target.closest('.dropPlace').appendChild(document.getElementById(data));\n}\n\nexport default Trello;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Trello\");\n$RefreshReg$(_c2, \"Column\");\n$RefreshReg$(_c3, \"ModalHide\");","map":{"version":3,"sources":["/home/kay/Documents/Projects/portfolio-app/src/pages/TrelloClone/components/columns.js"],"names":["React","useState","useRef","Card","Trello","dataTrello","cardId","setCardId","map","crntColumnObject","id","Column","cardsArrayObject","setCardsArray","cardsArray","cards","cardInput","addCard","oldCardsArrayObject","oldCardsArray","newName","current","value","push","name","drop","allowDrop","crntCardObject","ModalHide","modal","document","getElementById","classList","add","ev","preventDefault","data","dataTransfer","getData","target","closest","appendChild"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,SAAjB;;;AAEA,SAASC,MAAT,OAA6B;AAAA;;AAAA,MAAb;AAACC,IAAAA;AAAD,GAAa;AAC3B,MAAI,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,CAAD,CAAlC;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,eAEII,UAAU,CAACG,GAAX,CAAgBC,gBAAD,IAAsB;AACnC,0BAAO,QAAC,MAAD;AAAkC,QAAA,MAAM,EAAEH,MAA1C;AAAkD,QAAA,SAAS,EAAEC,SAA7D;AAAwE,QAAA,gBAAgB,EAAEE;AAA1F,SAAaA,gBAAgB,CAACC,EAA9B;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,CAFJ,eAME;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAdQN,M;;KAAAA,M;;AAgBT,SAASO,MAAT,QAAuD;AAAA;;AAAA,MAAvC;AAACF,IAAAA,gBAAD;AAAmBH,IAAAA,MAAnB;AAA2BC,IAAAA;AAA3B,GAAuC;AACnD,MAAI,CAACK,gBAAD,EAAmBC,aAAnB,IAAoCZ,QAAQ,CAAC;AAACa,IAAAA,UAAU,EAAEL,gBAAgB,CAACM;AAA9B,GAAD,CAAhD;AACA,QAAMC,SAAS,GAAGd,MAAM,EAAxB;;AAEA,WAASe,OAAT,GAAkB;AAChBV,IAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACAO,IAAAA,aAAa,CAAEK,mBAAD,IAAyB;AACrC,UAAIC,aAAa,GAAGD,mBAAmB,CAACJ,UAAxC;AACA,UAAIM,OAAO,GAAGJ,SAAS,CAACK,OAAV,CAAkBC,KAAhC;AACAN,MAAAA,SAAS,CAACK,OAAV,CAAkBC,KAAlB,GAAwB,EAAxB;AACAH,MAAAA,aAAa,CAACI,IAAd,CACE;AACEC,QAAAA,IAAI,EAAEJ,OADR;AAEEV,QAAAA,EAAE,EAAE,SAASJ;AAFf,OADF;AAMA,aAAO;AACLQ,QAAAA,UAAU,EAAEK;AADP,OAAP;AAGD,KAbY,CAAb;AAcD;;AAED,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,kBAAIV,gBAAgB,CAACe;AAArB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,MAAM,EAAEC,IAAnC;AAAyC,QAAA,UAAU,EAAEC,SAArD;AAAA,kBAEMd,gBAAgB,CAACE,UAAjB,CAA4BN,GAA5B,CACGmB,cAAD,IAAoB;AAClB,8BAAO,QAAC,IAAD;AAAuC,YAAA,cAAc,EAAEA;AAAvD,aAAW,SAASA,cAAc,CAACjB,EAAnC;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAHH;AAFN;AAAA;AAAA;AAAA;AAAA,cAFF,eAUI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAVJ,eAYI;AAAU,QAAA,GAAG,EAAEM,SAAf;AAA0B,QAAA,SAAS,EAAC,kBAApC;AAAuD,QAAA,EAAE,EAAE,aAAaP,gBAAgB,CAACC,EAAzF;AAA6F,QAAA,WAAW,EAAC;AAAzG;AAAA;AAAA;AAAA;AAAA,cAZJ,eAaI;AAAQ,QAAA,OAAO,EAAEO,OAAjB;AAA0B,QAAA,SAAS,EAAC,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,CAtBmD,CA0CrD;AACE;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACA;AAEA;AACD,C,CACD;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;IAhFSN,M;;MAAAA,M;;AAmFT,SAASiB,SAAT,GAAqB;AACnB,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACAF,EAAAA,KAAK,CAACG,SAAN,CAAgBC,GAAhB,CAAoB,QAApB;AACD;;MAHQL,S;;AAKT,SAASF,SAAT,CAAmBQ,EAAnB,EAAuB;AACnBA,EAAAA,EAAE,CAACC,cAAH;AACD;;AAEH,SAASV,IAAT,CAAcS,EAAd,EAAkB;AACdA,EAAAA,EAAE,CAACC,cAAH;AACA,MAAIC,IAAI,GAAGF,EAAE,CAACG,YAAH,CAAgBC,OAAhB,CAAwB,MAAxB,CAAX;AACAJ,EAAAA,EAAE,CAACK,MAAH,CAAUC,OAAV,CAAkB,YAAlB,EAAgCC,WAAhC,CAA4CX,QAAQ,CAACC,cAAT,CAAwBK,IAAxB,CAA5C;AACD;;AAEH,eAAehC,MAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Card from './cards';\n\nfunction Trello({dataTrello}){\n  let [cardId, setCardId] = useState(7)\n  return (\n    <div className=\"flex\">\n      {\n        dataTrello.map((crntColumnObject) => {\n          return <Column key={crntColumnObject.id} cardId={cardId} setCardId={setCardId} crntColumnObject={crntColumnObject} />\n        } )\n      }\n      <div className=\"add-column-btn\">\n        Add column\n      </div>\n    </div>\n  )\n}\n\nfunction Column({crntColumnObject, cardId, setCardId}) {\n    let [cardsArrayObject, setCardsArray] = useState({cardsArray: crntColumnObject.cards})\n    const cardInput = useRef()\n\n    function addCard(){\n      setCardId(cardId + 1)\n      setCardsArray((oldCardsArrayObject) => {\n        let oldCardsArray = oldCardsArrayObject.cardsArray\n        let newName = cardInput.current.value\n        cardInput.current.value=\"\"\n        oldCardsArray.push(\n          {\n            name: newName,\n            id: 'card' + cardId,\n          }\n        )\n        return {\n          cardsArray: oldCardsArray,\n        }\n      })\n    }\n\n    return (\n      <div>\n        <div className=\"block columns-bg\">\n          <b>{crntColumnObject.name}</b>\n          <div className=\"dropPlace\" onDrop={drop} onDragOver={allowDrop}>\n              {\n                cardsArrayObject.cardsArray.map(\n                  (crntCardObject) => {\n                    return <Card key={'card' + crntCardObject.id} crntCardObject={crntCardObject} />\n                  } )\n              }\n            </div>\n            <div className=\"\">\n            </div>\n            <textarea ref={cardInput} className=\"columns-textarea\" id={'textarea' + crntColumnObject.id} placeholder=\"Enter Card Name\"></textarea>\n            <button onClick={addCard} className=\"columns-btn\">Add Card</button>\n        </div>\n      </div>\n    )\n  \n  // let columns_array = []\n    // for (let i = 0; i < 5; i++){\n    //   let column = \n      // <div>\n      //   <div className=\"block\">\n      //     <div className=\"columns-bg\" onDrop={drop} onDragOver={allowDrop}>\n      //       {i + 1}\n      //       <div className=\"dropPlace\">\n      //       {ColumnOptions(i)}\n      //       </div>\n      //       <textarea className=\"columns-textarea\"></textarea>\n      //       <button className=\"columns-btn\">Button</button>\n      //     </div>\n      //   </div>\n      // </div>\n    //   columns_array.push(column)\n    // }\n  \n    // return columns_array\n  }\n  // function modalShow(e) {\n  //   e.preventDefault()\n  //   let modal = document.getElementById(\"modal\")\n  //   modal.classList.remove(\"hidden\")\n  // }\n  \n// function ColumnOptions(columnIndex) {\n//     let options_array = []\n//     for (let i = 0; i < 3; i++) {\n//       let id = 'card' + (columnIndex*3 + i)\n//       let option = \n//       <div className=\"flex\">\n//         <div className=\"option-bg\" id={id} onÐ¡lick={modalShow} draggable=\"true\" onDragStart={drag}>{columnIndex*3 + i + 1}</div>\n//       </div>\n//       options_array.push(option)\n//     }\n  \n//     return options_array\n//   }\n\n\nfunction ModalHide() {\n  let modal = document.getElementById(\"modal\")\n  modal.classList.add(\"hidden\")\n}\n\nfunction allowDrop(ev) {\n    ev.preventDefault();\n  }\n  \nfunction drop(ev) {\n    ev.preventDefault();\n    var data = ev.dataTransfer.getData(\"text\");\n    ev.target.closest('.dropPlace').appendChild(document.getElementById(data));\n  }\n\nexport default Trello;"]},"metadata":{},"sourceType":"module"}